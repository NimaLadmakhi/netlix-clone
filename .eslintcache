[{"D:\\netflix-clone\\src\\index.js":"1","D:\\netflix-clone\\src\\startup\\index.jsx":"2","D:\\netflix-clone\\src\\pages\\home\\index.jsx":"3","D:\\netflix-clone\\src\\layouts\\HeaderLayout.jsx":"4","D:\\netflix-clone\\src\\components\\header\\index.jsx":"5","D:\\netflix-clone\\src\\components\\navbar\\index.jsx":"6","D:\\netflix-clone\\src\\recoil\\atoms.js":"7","D:\\netflix-clone\\src\\fetcher\\index.js":"8","D:\\netflix-clone\\src\\components\\banner\\index.jsx":"9","D:\\netflix-clone\\src\\components\\slider\\index.jsx":"10","D:\\netflix-clone\\src\\components\\sections\\index.jsx":"11","D:\\netflix-clone\\src\\components\\cards\\index.jsx":"12","D:\\netflix-clone\\src\\components\\actors\\index.jsx":"13","D:\\netflix-clone\\src\\help\\backdropPathFilter.js":"14","D:\\netflix-clone\\src\\pages\\archive-genre\\index.jsx":"15","D:\\netflix-clone\\src\\pages\\single-genre\\index.jsx":"16","D:\\netflix-clone\\src\\components\\card-body\\index.jsx":"17","D:\\netflix-clone\\src\\pages\\actors-archive\\index.jsx":"18","D:\\netflix-clone\\src\\components\\actor\\index.jsx":"19","D:\\netflix-clone\\src\\hooks\\useGenreSelector.js":"20"},{"size":199,"mtime":1612085003025,"results":"21","hashOfConfig":"22"},{"size":2197,"mtime":1612255011236,"results":"23","hashOfConfig":"22"},{"size":1768,"mtime":1612185765039,"results":"24","hashOfConfig":"22"},{"size":274,"mtime":1612088714554,"results":"25","hashOfConfig":"22"},{"size":1716,"mtime":1612183185207,"results":"26","hashOfConfig":"22"},{"size":1749,"mtime":1612255018819,"results":"27","hashOfConfig":"22"},{"size":3955,"mtime":1612268806864,"results":"28","hashOfConfig":"22"},{"size":1510,"mtime":1612183209251,"results":"29","hashOfConfig":"22"},{"size":2343,"mtime":1612183174190,"results":"30","hashOfConfig":"22"},{"size":3037,"mtime":1612183536905,"results":"31","hashOfConfig":"22"},{"size":1404,"mtime":1612193220172,"results":"32","hashOfConfig":"22"},{"size":1515,"mtime":1612193222162,"results":"33","hashOfConfig":"22"},{"size":814,"mtime":1612267426772,"results":"34","hashOfConfig":"22"},{"size":156,"mtime":1612183215437,"results":"35","hashOfConfig":"22"},{"size":2141,"mtime":1612186758654,"results":"36","hashOfConfig":"22"},{"size":948,"mtime":1612193225208,"results":"37","hashOfConfig":"22"},{"size":983,"mtime":1612190348202,"results":"38","hashOfConfig":"22"},{"size":3678,"mtime":1612268735319,"results":"39","hashOfConfig":"22"},{"size":639,"mtime":1612199303452,"results":"40","hashOfConfig":"22"},{"size":1137,"mtime":1612267515224,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"163isis",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"D:\\netflix-clone\\src\\index.js",[],["91","92"],"D:\\netflix-clone\\src\\startup\\index.jsx",["93"],"/** @format */\r\n\r\nimport ActorsArchive from 'pages/actors-archive';\r\nimport ArchiveGenre from 'pages/archive-genre';\r\nimport Home from 'pages/home';\r\nimport SingleGenre from 'pages/single-genre';\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport { GENRE_MOVIES_QUERY_ATOM, GENRE_MOVIE_ATOM, GENRE_TV_ATOM, GENRE_TV_QUERY_ATOM } from 'recoil/atoms';\r\nimport './index.scss';\r\n\r\nexport default () => {\r\n     return (\r\n          <RecoilRoot>\r\n               <React.Suspense fallback={<p>Loading ...</p>}>\r\n                    <Router>\r\n                         <Switch>\r\n                              <Route path='/' exact component={Home} />\r\n                              <Route\r\n                                   path='/movie'\r\n                                   exact\r\n                                   render={() => (\r\n                                        <ArchiveGenre\r\n                                             title='Movie'\r\n                                             ATOM={GENRE_MOVIE_ATOM}\r\n                                             QUERY_ATOM={GENRE_MOVIES_QUERY_ATOM}\r\n                                        />\r\n                                   )}\r\n                              />\r\n                              <Route\r\n                                   path='/tv'\r\n                                   exact\r\n                                   render={() => (\r\n                                        <ArchiveGenre\r\n                                             title='Tv'\r\n                                             ATOM={GENRE_TV_ATOM}\r\n                                             QUERY_ATOM={GENRE_TV_QUERY_ATOM}\r\n                                        />\r\n                                   )}\r\n                              />\r\n                              <Route path='/genre/:id/:name/:type' exact component={SingleGenre} />\r\n                              <Route path='/actors-archive' exact component={ActorsArchive} />\r\n                         </Switch>\r\n                    </Router>\r\n               </React.Suspense>\r\n          </RecoilRoot>\r\n     );\r\n};\r\n","D:\\netflix-clone\\src\\pages\\home\\index.jsx",[],"D:\\netflix-clone\\src\\layouts\\HeaderLayout.jsx",[],"D:\\netflix-clone\\src\\components\\header\\index.jsx",["94"],"/** @format */\r\n\r\nimport MenuWhiteIcon from 'assets/images/menu-white.svg';\r\nimport Navbar from 'components/navbar';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.scss';\r\n\r\nconst Header = () => {\r\n     const [toggle, setToggle] = React.useState(false);\r\n     const checkVariant = () =>\r\n          window.innerWidth > 992 ? 'desktop' : 'mobile';\r\n     const [navbarVariant, setNavbarVariant] = React.useState(checkVariant());\r\n\r\n     window.addEventListener('resize', () => setNavbarVariant(checkVariant()));\r\n\r\n     const handleToggle = () => {\r\n          setToggle((prevToggle) => !prevToggle);\r\n          document.body.style.overflowY = !toggle ? 'hidden' : 'scroll';\r\n     };\r\n     const isBlurText = toggle ? 'header__link--blur' : '';\r\n\r\n     return (\r\n          <header className='header'>\r\n               <nav className='header__nav'>\r\n                    <Link\r\n                         className={`header__link header__link--orange ${isBlurText}`}\r\n                         to='/'>\r\n                         n<span>e</span>t<span>f</span>lix <span>c</span>lone\r\n                    </Link>\r\n                    {navbarVariant === 'mobile' && (\r\n                         <img\r\n                              onClick={handleToggle}\r\n                              className='header__logo'\r\n                              src={MenuWhiteIcon}\r\n                         />\r\n                    )}\r\n                    <Navbar\r\n                         toggle={handleToggle}\r\n                         variant={navbarVariant}\r\n                         isOpen={toggle}\r\n                    />\r\n               </nav>\r\n          </header>\r\n     );\r\n};\r\n\r\nexport default Header;\r\n","D:\\netflix-clone\\src\\components\\navbar\\index.jsx",[],"D:\\netflix-clone\\src\\recoil\\atoms.js",["95","96","97"],"/** @format */\r\n\r\nimport {\r\n     GenreMovieDB_URL,\r\n     GenreTvDB_URL,\r\n     PersonPopular_URL,\r\n     request,\r\n     TopRatedMovieDB_URL,\r\n     TrendingMovieDB_URL,\r\n     UpCommingMovieDB_URL\r\n} from 'fetcher';\r\nimport { atom, selector, selectorFamily } from 'recoil';\r\n\r\nconst TRENDING_MOVIES_ATOM = atom({\r\n     key: 'TREND_MOVIE_ATOM',\r\n     default: selector({\r\n          key: 'SELECTOR_ATOM_MOVIE',\r\n          get: async () => {\r\n               const response = await request(TrendingMovieDB_URL);\r\n               return response?.results;\r\n          },\r\n     }),\r\n});\r\n\r\nconst UP_COMMING_MOVIE_ATOM = atom({\r\n     key: 'UP_COMMING_MOVIE_ATOM',\r\n     default: selector({\r\n          key: 'SELECTOR_UP_COMMING',\r\n          get: async () => {\r\n               const response = await request(UpCommingMovieDB_URL);\r\n               return response?.results;\r\n          },\r\n     }),\r\n});\r\n\r\nconst TOP_RATED_MOVIE_ATOM = atom({\r\n     key: 'TOP_RATED_MOVIE_ATOM',\r\n     default: selector({\r\n          key: 'SELECTOR_TOP_RATED_MOVIE',\r\n          get: async () => {\r\n               const response = await request(TopRatedMovieDB_URL);\r\n               return response?.results;\r\n          },\r\n     }),\r\n});\r\n\r\nconst GENRE_MOVIE_ATOM = atom({\r\n     key: 'GENRE MOVIE ATOM',\r\n     default: selector({\r\n          key: 'SELECTOR GENRE MOVIE',\r\n          get: async () => {\r\n               const response = await request(GenreMovieDB_URL);\r\n               return response?.genres;\r\n          },\r\n     }),\r\n});\r\n\r\nconst GENRE_MOVIES_QUERY_ATOM = atom({\r\n     key: 'GENRE MOVIES QUERY ATOM',\r\n     default: {},\r\n});\r\n\r\nconst GENRE_TV_QUERY_ATOM = atom({\r\n     key: 'GENRE TV QUERY ATOM',\r\n     default: {},\r\n});\r\n\r\nconst GENRE_TV_ATOM = atom({\r\n     key: 'GENRE TV ATOM',\r\n     default: selector({\r\n          key: 'SELECTOR TV MOVIE',\r\n          get: async () => {\r\n               const response = await request(GenreTvDB_URL);\r\n               return response?.genres;\r\n          },\r\n     }),\r\n});\r\n\r\nconst GENRE_DETAIL_SELECT = atom({\r\n     key: 'GENRE DETAIL SELECT',\r\n     default: {},\r\n});\r\n\r\nconst ACTORS_ATOM = selector({\r\n     key: 'ACTORS_SELECTOR',\r\n     get: async () => {\r\n          const popularResponse = await request(PersonPopular_URL);\r\n          return popularResponse.results;\r\n     },\r\n});\r\n\r\nconst ACTORS_ATOM_FILTER = selectorFamily({\r\n     key: 'FILTER ACTORS ATOM',\r\n     get: ({ genres, gender, sortAs }) => ({ get }) => {\r\n          const actors = get(ACTORS_ATOM);\r\n          const collection = [];\r\n\r\n          [...genres]\r\n               .filter((genre) => genre.checked)\r\n               .map((genre) => {\r\n                    actors.map((actor) => {\r\n                         // genre_ids\r\n                         actor.known_for.map((movie) => {\r\n                              if (movie.genre_ids.includes(genre.id)) {\r\n                                   collection.push(actor);\r\n                              }\r\n                         });\r\n                    });\r\n               });\r\n          function sorter(collection) {\r\n               switch (sortAs) {\r\n                    case 'asc':\r\n                         return collection.sort((a, b) => b.popularity - a.popularity);\r\n                    case 'dsc':\r\n                         return collection.sort((a, b) => a.popularity - b.popularity);\r\n                    default:\r\n                         return collection;\r\n               }\r\n          }\r\n\r\n          return sorter(\r\n               [...new Set(collection)].filter((actor) => {\r\n                    if (gender === '0') return actor;\r\n                    return actor.gender === +gender;\r\n               }),\r\n          );\r\n     },\r\n});\r\n\r\nexport {\r\n     GENRE_DETAIL_SELECT,\r\n     TRENDING_MOVIES_ATOM,\r\n     UP_COMMING_MOVIE_ATOM,\r\n     TOP_RATED_MOVIE_ATOM,\r\n     GENRE_MOVIE_ATOM,\r\n     GENRE_TV_ATOM,\r\n     ACTORS_ATOM,\r\n     GENRE_MOVIES_QUERY_ATOM,\r\n     GENRE_TV_QUERY_ATOM,\r\n     ACTORS_ATOM_FILTER,\r\n};\r\n\r\n","D:\\netflix-clone\\src\\fetcher\\index.js",[],"D:\\netflix-clone\\src\\components\\banner\\index.jsx",["98","99"],"/** @format */\r\n\r\nimport { ImageDB_URL, MovieDB_URL, request } from 'fetcher';\r\nimport React from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { TRENDING_MOVIES_ATOM } from 'recoil/atoms';\r\nimport './index.scss';\r\n\r\nconst Banner = () => {\r\n     const [currentTrendingIndex, setCurrentTrendingIndex] = React.useState(0);\r\n     const trendingMovie = useRecoilValue(TRENDING_MOVIES_ATOM);\r\n     const [currentKeyMovie, setCurrentKeyMovie] = React.useState();\r\n\r\n     React.useEffect(() => {\r\n          const trendingInterval = setInterval(() => {\r\n               if (currentTrendingIndex <= trendingMovie.length - 5)\r\n                    setCurrentTrendingIndex(\r\n                         (prevCurrentIndex) => prevCurrentIndex + 1,\r\n                    );\r\n               else setCurrentTrendingIndex(0);\r\n          }, 5000);\r\n          return () => clearInterval(trendingInterval);\r\n     }, [currentTrendingIndex]);\r\n\r\n     const youtubeHandler = async () => {\r\n          const currentTrendingMovie = trendingMovie[currentTrendingIndex];\r\n          const response = await request(MovieDB_URL(currentTrendingMovie.id));\r\n          setCurrentKeyMovie(response?.results[0]?.key);\r\n     };\r\n\r\n     const resetYoutubeKey = () => setCurrentKeyMovie();\r\n     const currentMovie = trendingMovie[currentTrendingIndex];\r\n     if (currentKeyMovie)\r\n          return (\r\n               <YouTube\r\n                    opts={{\r\n                         playerVars: {\r\n                              autoplay: 1,\r\n                         },\r\n                    }}\r\n                    videoId={currentKeyMovie}\r\n                    className='youtube__video'\r\n                    onEnd={resetYoutubeKey}\r\n               />\r\n          );\r\n     return (\r\n          <div className='banner' onClick={youtubeHandler}>\r\n               <img\r\n                    className='banner__image'\r\n                    src={ImageDB_URL(currentMovie.backdrop_path)}\r\n               />\r\n               <div className='banner__content'>\r\n                    <h1 className='banner__title'>{currentMovie.title}</h1>\r\n                    <p className='banner__description'>\r\n                         {currentMovie.overview}\r\n                    </p>\r\n               </div>\r\n          </div>\r\n     );\r\n};\r\n\r\nexport default Banner;\r\n","D:\\netflix-clone\\src\\components\\slider\\index.jsx",[],"D:\\netflix-clone\\src\\components\\sections\\index.jsx",[],"D:\\netflix-clone\\src\\components\\cards\\index.jsx",["100"],"/** @format */\r\n\r\nimport CardBody from 'components/card-body';\r\nimport { request } from 'fetcher';\r\nimport { BackDropPathFilter } from 'help/backdropPathFilter';\r\nimport React from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport './index.scss';\r\n\r\nconst Cards = ({ url, activeGenre, ATOM, FilterNumber }) => {\r\n     const [items, setItems] = React.useState();\r\n     const [GenreMovieArchiveState, setGenreMovieArchiveState] = useRecoilState(ATOM);\r\n\r\n     React.useEffect(() => {\r\n          (async () => {\r\n               if (!GenreMovieArchiveState[activeGenre.name]) {\r\n                    const response = await request(url);\r\n                    setItems(BackDropPathFilter(response?.items)?.splice(0, FilterNumber || response?.items?.length));\r\n                    setGenreMovieArchiveState((prevMovies) => ({\r\n                         ...prevMovies,\r\n                         [activeGenre.name]: {\r\n                              items: BackDropPathFilter(response?.items),\r\n                              id: activeGenre.id,\r\n                         },\r\n                    }));\r\n               } else {\r\n                    setItems(BackDropPathFilter(GenreMovieArchiveState[activeGenre.name].items)?.splice(0, 4));\r\n               }\r\n          })();\r\n     }, [url]);\r\n\r\n     return (\r\n          <div className='cards'>\r\n               {items?.map((item) => (\r\n                    <CardBody key={item.id} item={item} />\r\n               ))}\r\n          </div>\r\n     );\r\n};\r\n\r\nexport default Cards;\r\n","D:\\netflix-clone\\src\\components\\actors\\index.jsx",[],"D:\\netflix-clone\\src\\help\\backdropPathFilter.js",[],"D:\\netflix-clone\\src\\pages\\archive-genre\\index.jsx",["101"],"/** @format */\r\n\r\nimport Slider from 'components/slider';\r\nimport { ListLoadDB_URL, request } from 'fetcher';\r\nimport HeaderLayout from 'layouts/HeaderLayout';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport './index.scss';\r\n\r\nconst ArchiveGenre = ({ ATOM, QUERY_ATOM, title }) => {\r\n     const [movieData, setMovieData] = useRecoilState(QUERY_ATOM);\r\n     const movieDataGanres = useRecoilValue(ATOM);\r\n\r\n     React.useEffect(() => {\r\n          (() => {\r\n               movieDataGanres.map(async (genre) => {\r\n                    if (!movieData[genre]) {\r\n                         const response = await request(ListLoadDB_URL(genre.id));\r\n                         if (response && response.items.length > 0)\r\n                              setMovieData((prevMovies) => ({\r\n                                   ...prevMovies,\r\n                                   [genre.name]: {\r\n                                        items: response.items,\r\n                                        id: genre.id,\r\n                                   },\r\n                              }));\r\n                    }\r\n               });\r\n          })();\r\n     }, [title]);\r\n\r\n     return (\r\n          <HeaderLayout>\r\n               <div className='archive'>\r\n                    <h1 className='archive__title'>{title} Archives</h1>\r\n                    {Object.keys(movieData).map((movie_key) => (\r\n                         <Slider\r\n                              key={movie_key}\r\n                              state={movieData[movie_key].items}\r\n                              title={\r\n                                   <Link\r\n                                        className='archive__link'\r\n                                        to={`/genre/${movieData[movie_key].id}/${movie_key}/${title}`}>\r\n                                        {movie_key}\r\n                                   </Link>\r\n                              }\r\n                         />\r\n                    ))}\r\n               </div>\r\n          </HeaderLayout>\r\n     );\r\n};\r\n\r\nexport default ArchiveGenre;\r\n","D:\\netflix-clone\\src\\pages\\single-genre\\index.jsx",[],"D:\\netflix-clone\\src\\components\\card-body\\index.jsx",["102"],"import { ImageDB_URL } from 'fetcher';\r\nimport React from 'react';\r\nimport ReactStars from 'react-rating-stars-component';\r\nimport './index.scss';\r\n\r\nconst CardBody = ({ item }) => {\r\n     return (\r\n          <div className='cards-body__body'>\r\n               <div className='cards-body__overlay'></div>\r\n               <div className='cards-body__content'>\r\n                    <h1 className='cards-body__title'>{item.title}</h1>\r\n                    <p className='cards-body__description'>{item.overview} ...</p>\r\n                    <ReactStars\r\n                         classNames='cards-body__stars'\r\n                         value={item.vote_average / 2}\r\n                         activeColor='orange'\r\n                         count={5}\r\n                         size={15}\r\n                    />\r\n               </div>\r\n               <img src={ImageDB_URL(item.backdrop_path)} className='cards-body__image'></img>\r\n          </div>\r\n     );\r\n};\r\n\r\nexport default CardBody;\r\n","D:\\netflix-clone\\src\\pages\\actors-archive\\index.jsx",[],"D:\\netflix-clone\\src\\components\\actor\\index.jsx",[],"D:\\netflix-clone\\src\\hooks\\useGenreSelector.js",["103","104","105"],"import * as React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport * as recoilAtom from 'recoil/atoms';\r\n\r\nexport const useGenreSelector = () => {\r\n     const actorsState = useRecoilValue(recoilAtom.ACTORS_ATOM);\r\n     const movieGenreState = useRecoilValue(recoilAtom.GENRE_MOVIE_ATOM);\r\n     const tvGenreState = useRecoilValue(recoilAtom.GENRE_TV_ATOM);\r\n     const [collectionGenre, setCollectionGenre] = React.useState(mapGenre(movieGenreState, tvGenreState, actorsState));\r\n     return [collectionGenre, setCollectionGenre];\r\n};\r\n\r\nfunction mapGenre(movieGenreState, tvGenreState, actorsState) {\r\n     const collection = [];\r\n     actorsState.map((actor) => {\r\n          actor.known_for.map((moviePopular) => {\r\n               moviePopular.genre_ids.map((id) => {\r\n                    let detail = movieGenreState.find((movie) => movie.id === id);\r\n                    if (!detail) detail = tvGenreState.find((tv) => tv.id === id);\r\n                    collection.push(detail);\r\n               });\r\n          });\r\n     });\r\n     return [...new Set(collection)].map((element) => ({ ...element, checked: true }));\r\n}\r\n",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":13,"column":1,"nodeType":"112","endLine":49,"endColumn":3},{"ruleId":"113","severity":1,"message":"114","line":32,"column":26,"nodeType":"115","endLine":36,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":100,"column":29,"nodeType":"118","messageId":"119","endLine":100,"endColumn":31},{"ruleId":"116","severity":1,"message":"117","line":101,"column":40,"nodeType":"118","messageId":"119","endLine":101,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":103,"column":54,"nodeType":"118","messageId":"119","endLine":103,"endColumn":56},{"ruleId":"120","severity":1,"message":"121","line":24,"column":9,"nodeType":"122","endLine":24,"endColumn":31,"suggestions":"123"},{"ruleId":"113","severity":1,"message":"114","line":49,"column":16,"nodeType":"115","endLine":52,"endColumn":18},{"ruleId":"120","severity":1,"message":"124","line":30,"column":9,"nodeType":"122","endLine":30,"endColumn":14,"suggestions":"125"},{"ruleId":"120","severity":1,"message":"126","line":31,"column":9,"nodeType":"122","endLine":31,"endColumn":16,"suggestions":"127"},{"ruleId":"113","severity":1,"message":"114","line":21,"column":16,"nodeType":"115","endLine":21,"endColumn":89},{"ruleId":"116","severity":1,"message":"117","line":15,"column":30,"nodeType":"118","messageId":"119","endLine":15,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":16,"column":46,"nodeType":"118","messageId":"119","endLine":16,"endColumn":48},{"ruleId":"116","severity":1,"message":"117","line":17,"column":48,"nodeType":"118","messageId":"119","endLine":17,"endColumn":50},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'trendingMovie.length'. Either include it or remove the dependency array.","ArrayExpression",["130"],"React Hook React.useEffect has missing dependencies: 'FilterNumber', 'GenreMovieArchiveState', 'activeGenre.id', 'activeGenre.name', and 'setGenreMovieArchiveState'. Either include them or remove the dependency array. If 'setItems' needs the current value of 'activeGenre.name', you can also switch to useReducer instead of useState and read 'activeGenre.name' in the reducer.",["131"],"React Hook React.useEffect has missing dependencies: 'movieData', 'movieDataGanres', and 'setMovieData'. Either include them or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [currentTrendingIndex, trendingMovie.length]",{"range":"139","text":"140"},"Update the dependencies array to be: [FilterNumber, GenreMovieArchiveState, activeGenre.id, activeGenre.name, setGenreMovieArchiveState, url]",{"range":"141","text":"142"},"Update the dependencies array to be: [movieData, movieDataGanres, setMovieData, title]",{"range":"143","text":"144"},[942,964],"[currentTrendingIndex, trendingMovie.length]",[1278,1283],"[FilterNumber, GenreMovieArchiveState, activeGenre.id, activeGenre.name, setGenreMovieArchiveState, url]",[1226,1233],"[movieData, movieDataGanres, setMovieData, title]"]